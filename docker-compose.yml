version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: kbee_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - kbee_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # KBee Manager Web Application
  web:
    build: .
    container_name: kbee_web
    restart: unless-stopped
    ports:
      - "8000:5000"
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - FLASK_ENV=${FLASK_ENV}
      - FLASK_DEBUG=${FLASK_DEBUG}
      - DOMAIN=${DOMAIN}
      - SESSION_COOKIE_SECURE=${SESSION_COOKIE_SECURE}
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - kbee_network
    volumes:
      - ./static:/app/static
      - ./templates:/app/templates
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: kbee_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-temp.conf:/etc/nginx/nginx.conf:ro
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
    networks:
      - kbee_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: kbee_certbot
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    command: >
      sh -c "
        if [ ! -f /etc/letsencrypt/live/khainguyenbee.io.vn/fullchain.pem ]; then
          echo 'Obtaining SSL certificate for domain...';
          certbot certonly --webroot --webroot-path=/var/www/certbot --email admin@khainguyenbee.io.vn --agree-tos --no-eff-email -d khainguyenbee.io.vn -d www.khainguyenbee.io.vn;
        else
          echo 'SSL certificate already exists';
        fi
      "
    depends_on:
      - nginx

  # SSL Auto-renewal
  ssl-renew:
    image: certbot/certbot
    container_name: kbee_ssl_renew
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    command: >
      sh -c "
        trap exit TERM; while :; do
          certbot renew --quiet;
          docker-compose exec nginx nginx -s reload;
          sleep 12h & wait \$${!};
        done
      "
    depends_on:
      - nginx
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  nginx_logs:
    driver: local
  certbot_certs:
    driver: local
  certbot_www:
    driver: local

networks:
  kbee_network:
    driver: bridge
