services:
  # MySQL Database for Local Testing
  db:
    image: mysql:8.0
    container_name: kbee_db_local
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-local_root_password}
      MYSQL_DATABASE: ${DB_NAME:-kbee_manager}
      MYSQL_USER: ${DB_USER:-kbee_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-local_password}
    volumes:
      - mysql_data_local:/var/lib/mysql
      - ../init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${DB_PORT:-3306}:3306"
    networks:
      - kbee_local_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Backend Flask API for Local Testing
  backend:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: kbee_backend_local
    restart: unless-stopped
    environment:
      - DATABASE_URL=mysql+pymysql://${DB_USER:-kbee_user}:${DB_PASSWORD:-local_password}@db:3306/${DB_NAME:-kbee_manager}
      - SECRET_KEY=${SECRET_KEY:-local-secret-key-for-testing}
      - FLASK_ENV=${FLASK_ENV:-development}
      - FLASK_DEBUG=${FLASK_DEBUG:-1}
      - DOMAIN=${DOMAIN:-localhost}
      - PROTOCOL=${PROTOCOL:-http}
      - PORT=${PORT:-80}
    ports:
      - "8000:5000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ../static:/app/static:ro
    networks:
      - kbee_local_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App for Local Testing (HTTP only)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.local
    container_name: kbee_frontend_local
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      - backend
    volumes:
      - ../logs/nginx:/var/log/nginx
    environment:
      - REACT_APP_API_URL=/api
    networks:
      - kbee_local_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: kbee_redis_local
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_local:/data
    networks:
      - kbee_local_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql_data_local:
    driver: local
  redis_data_local:
    driver: local

networks:
  kbee_local_network:
    driver: bridge
