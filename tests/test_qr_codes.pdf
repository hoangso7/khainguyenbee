<!doctype html>
<html lang=en>
  <head>
    <title>AttributeError: &#39;str&#39; object has no attribute &#39;wrapOn&#39;
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "eamNb1zKh6cSyMIWXwNn";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>AttributeError</h1>
<div class="detail">
  <p class="errormsg">AttributeError: &#39;str&#39; object has no attribute &#39;wrapOn&#39;
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-281472900692336">
  <h4>File <cite class="filename">"/usr/local/lib/python3.9/site-packages/flask/app.py"</cite>,
      line <em class="line">2213</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-281472881351136">
  <h4>File <cite class="filename">"/usr/local/lib/python3.9/site-packages/flask/app.py"</cite>,
      line <em class="line">2193</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-281472881351248">
  <h4>File <cite class="filename">"/usr/local/lib/python3.9/site-packages/flask/app.py"</cite>,
      line <em class="line">2190</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-281472881351360">
  <h4>File <cite class="filename">"/usr/local/lib/python3.9/site-packages/flask/app.py"</cite>,
      line <em class="line">1486</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-281472881351472">
  <h4>File <cite class="filename">"/usr/local/lib/python3.9/site-packages/flask/app.py"</cite>,
      line <em class="line">1484</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-281472881351584">
  <h4>File <cite class="filename">"/usr/local/lib/python3.9/site-packages/flask/app.py"</cite>,
      line <em class="line">1469</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-281472881351696">
  <h4>File <cite class="filename">"/usr/local/lib/python3.9/site-packages/flask_login/utils.py"</cite>,
      line <em class="line">290</em>,
      in <code class="function">decorated_view</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return current_app.login_manager.unauthorized()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># flask 1.x compatibility</pre>
<pre class="line before"><span class="ws">        </span># current_app.ensure_sync is only available in Flask &gt;= 2.0</pre>
<pre class="line before"><span class="ws">        </span>if callable(getattr(current_app, &#34;ensure_sync&#34;, None)):</pre>
<pre class="line current"><span class="ws">            </span>return current_app.ensure_sync(func)(*args, **kwargs)</pre>
<pre class="line after"><span class="ws">        </span>return func(*args, **kwargs)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return decorated_view</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-281472881307712">
  <h4>File <cite class="filename">"/app/app.py"</cite>,
      line <em class="line">509</em>,
      in <code class="function">export_qr_pdf</code></h4>
  <div class="source "><pre class="line before"><span class="ws">        </span>]))</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>story.append(table)</pre>
<pre class="line before"><span class="ws">        </span>story.append(Spacer(1, 20))</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>doc.build(story)</pre>
<pre class="line after"><span class="ws">    </span>buffer.seek(0)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return send_file(buffer, as_attachment=True, download_name=&#39;beehive_qr_codes.pdf&#39;, mimetype=&#39;application/pdf&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>if __name__ == &#39;__main__&#39;:</pre></div>
</div>

<li><div class="frame" id="frame-281472881307824">
  <h4>File <cite class="filename">"/usr/local/lib/python3.9/site-packages/reportlab/platypus/doctemplate.py"</cite>,
      line <em class="line">1317</em>,
      in <code class="function">build</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                        </span>PageTemplate(id=&#39;Later&#39;,frames=frameT, onPage=onLaterPages,pagesize=self.pagesize)])</pre>
<pre class="line before"><span class="ws">        </span>if onFirstPage is _doNothing and hasattr(self,&#39;onFirstPage&#39;):</pre>
<pre class="line before"><span class="ws">            </span>self.pageTemplates[0].beforeDrawPage = self.onFirstPage</pre>
<pre class="line before"><span class="ws">        </span>if onLaterPages is _doNothing and hasattr(self,&#39;onLaterPages&#39;):</pre>
<pre class="line before"><span class="ws">            </span>self.pageTemplates[1].beforeDrawPage = self.onLaterPages</pre>
<pre class="line current"><span class="ws">        </span>BaseDocTemplate.build(self,flowables, canvasmaker=canvasmaker)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def progressCB(typ, value):</pre>
<pre class="line after"><span class="ws">    </span>&#34;&#34;&#34;Example prototype for progress monitoring.</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>This aims to provide info about what is going on</pre></div>
</div>

<li><div class="frame" id="frame-281472878942576">
  <h4>File <cite class="filename">"/usr/local/lib/python3.9/site-packages/reportlab/platypus/doctemplate.py"</cite>,
      line <em class="line">1082</em>,
      in <code class="function">build</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                        </span>self._setPageTemplate()</pre>
<pre class="line before"><span class="ws">                    </span>del flowables[0]</pre>
<pre class="line before"><span class="ws">                </span>self.clean_hanging()</pre>
<pre class="line before"><span class="ws">                </span>try:</pre>
<pre class="line before"><span class="ws">                    </span>first = flowables[0]</pre>
<pre class="line current"><span class="ws">                    </span>self.handle_flowable(flowables)</pre>
<pre class="line after"><span class="ws">                    </span>handled += 1</pre>
<pre class="line after"><span class="ws">                </span>except:</pre>
<pre class="line after"><span class="ws">                    </span>#if it has trace info, add it to the traceback message.</pre>
<pre class="line after"><span class="ws">                    </span>if hasattr(first, &#39;_traceInfo&#39;) and first._traceInfo:</pre>
<pre class="line after"><span class="ws">                        </span>exc = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-281472878942688">
  <h4>File <cite class="filename">"/usr/local/lib/python3.9/site-packages/reportlab/platypus/doctemplate.py"</cite>,
      line <em class="line">931</em>,
      in <code class="function">handle_flowable</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>self.afterFlowable(f)</pre>
<pre class="line before"><span class="ws">        </span>else:</pre>
<pre class="line before"><span class="ws">            </span>frame = self.frame</pre>
<pre class="line before"><span class="ws">            </span>canv = self.canv</pre>
<pre class="line before"><span class="ws">            </span>#try to fit it then draw it</pre>
<pre class="line current"><span class="ws">            </span>if frame.add(f, canv, trySplit=self.allowSplitting):</pre>
<pre class="line after"><span class="ws">                </span>if not isinstance(f,FrameActionFlowable):</pre>
<pre class="line after"><span class="ws">                    </span>self._curPageFlowableCount += 1</pre>
<pre class="line after"><span class="ws">                    </span>self.afterFlowable(f)</pre>
<pre class="line after"><span class="ws">                </span>_addGeneratedContent(flowables,frame)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre></div>
</div>

<li><div class="frame" id="frame-281472878942912">
  <h4>File <cite class="filename">"/usr/local/lib/python3.9/site-packages/reportlab/platypus/frames.py"</cite>,
      line <em class="line">169</em>,
      in <code class="function">_add</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                    </span>if getattr(flowable,&#39;_SPACETRANSFER&#39;,False) or zeroSize:</pre>
<pre class="line before"><span class="ws">                        </span>s = self._prevASpace</pre>
<pre class="line before"><span class="ws">                    </span>s = max(s-self._prevASpace,0)</pre>
<pre class="line before"><span class="ws">            </span>h = y - p - s</pre>
<pre class="line before"><span class="ws">            </span>if h&gt;0 or zeroSize:</pre>
<pre class="line current"><span class="ws">                </span>w, h = flowable.wrap(aW, h)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>return 0</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">            </span>h += s</pre>
<pre class="line after"><span class="ws">            </span>y -= h</pre></div>
</div>

<li><div class="frame" id="frame-281472878976464">
  <h4>File <cite class="filename">"/usr/local/lib/python3.9/site-packages/reportlab/platypus/tables.py"</cite>,
      line <em class="line">1317</em>,
      in <code class="function">wrap</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>sc,sr = start</pre>
<pre class="line before"><span class="ws">        </span>ec,er = end</pre>
<pre class="line before"><span class="ws">        </span>self._drawVLines((sc+1, sr), (ec+1, er), weight, color, count, space)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def wrap(self, availWidth, availHeight):</pre>
<pre class="line current"><span class="ws">        </span>self._calc(availWidth, availHeight)</pre>
<pre class="line after"><span class="ws">        </span>self.availWidth = availWidth</pre>
<pre class="line after"><span class="ws">        </span>return (self._width, self._height)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def onSplit(self,T,byRow=1):</pre>
<pre class="line after"><span class="ws">        </span>&#39;&#39;&#39;</pre></div>
</div>

<li><div class="frame" id="frame-281472879859856">
  <h4>File <cite class="filename">"/usr/local/lib/python3.9/site-packages/reportlab/platypus/tables.py"</cite>,
      line <em class="line">732</em>,
      in <code class="function">_calc</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if self._nosplitCmds:</pre>
<pre class="line before"><span class="ws">            </span>self._calcNoSplitRanges()</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># calculate the full table height</pre>
<pre class="line current"><span class="ws">        </span>self._calc_height(availHeight,availWidth,W=W)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># calculate the full table width</pre>
<pre class="line after"><span class="ws">        </span>self._calc_width(availWidth,W=W)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if self._spanCmds:</pre></div>
</div>

<li><div class="frame" id="frame-281472879859968">
  <h4>File <cite class="filename">"/usr/local/lib/python3.9/site-packages/reportlab/platypus/tables.py"</cite>,
      line <em class="line">656</em>,
      in <code class="function">_calc_height</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                                </span>raise ValueError(f&#39;Flowable {v[0].identity()} in cell({i},{j}) can\&#39;t have auto width\n{self.identity(30)}&#39;)</pre>
<pre class="line before"><span class="ws">                            </span>if canv: canv._fontname, canv._fontsize, canv._leading = s.fontname, s.fontsize, s.leading or 1.2*s.fontsize</pre>
<pre class="line before"><span class="ws">                            </span>if ji in colSpanCells:</pre>
<pre class="line before"><span class="ws">                                </span>if not span: continue</pre>
<pre class="line before"><span class="ws">                                </span>w = max(colpositions[span[2]+1]-colpositions[span[0]],w or 0)</pre>
<pre class="line current"><span class="ws">                            </span>dW,t = self._listCellGeom(v,w or self._listValueWidth(v),s)</pre>
<pre class="line after"><span class="ws">                            </span>if canv: canv._fontname, canv._fontsize, canv._leading = saved</pre>
<pre class="line after"><span class="ws">                            </span>dW = dW + s.leftPadding + s.rightPadding</pre>
<pre class="line after"><span class="ws">                            </span>if not rl_config.allowTableBoundsErrors and dW&gt;w:</pre>
<pre class="line after"><span class="ws">                                </span>from reportlab.platypus.doctemplate import LayoutError</pre>
<pre class="line after"><span class="ws">                                </span>raise LayoutError(&#34;Flowable %s (%sx%s points) too wide for cell(%d,%d) (%sx* points) in\n%s&#34; % (v[0].identity(30),fp_str(dW),fp_str(t),i,j, fp_str(w), self.identity(30)))</pre></div>
</div>

<li><div class="frame" id="frame-281472879860192">
  <h4>File <cite class="filename">"/usr/local/lib/python3.9/site-packages/reportlab/platypus/tables.py"</cite>,
      line <em class="line">492</em>,
      in <code class="function">_listCellGeom</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>if isinstance(V, str):</pre>
<pre class="line before"><span class="ws">            </span>vw = self._elementWidth(V, s)</pre>
<pre class="line before"><span class="ws">            </span>vh = len(V.split(&#39;\n&#39;))*s.fontsize*1.2</pre>
<pre class="line before"><span class="ws">            </span>return max(w, vw), vh</pre>
<pre class="line before"><span class="ws">        </span>for v in V:</pre>
<pre class="line current"><span class="ws">            </span>vw, vh = v.wrapOn(canv, aW, aH)</pre>
<pre class="line after"><span class="ws">            </span>sb = v.getSpaceBefore()</pre>
<pre class="line after"><span class="ws">            </span>sa = v.getSpaceAfter()</pre>
<pre class="line after"><span class="ws">            </span>if W is not None: W.append(vw)</pre>
<pre class="line after"><span class="ws">            </span>if H is not None: H.append(vh)</pre>
<pre class="line after"><span class="ws">            </span>w = max(w,vw)</pre></div>
</div>
</ul>
  <blockquote>AttributeError: &#39;str&#39; object has no attribute &#39;wrapOn&#39;
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;/usr/local/lib/python3.9/site-packages/flask/app.py&#34;, line 2213, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;/usr/local/lib/python3.9/site-packages/flask/app.py&#34;, line 2193, in wsgi_app
    response = self.handle_exception(e)
  File &#34;/usr/local/lib/python3.9/site-packages/flask/app.py&#34;, line 2190, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;/usr/local/lib/python3.9/site-packages/flask/app.py&#34;, line 1486, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;/usr/local/lib/python3.9/site-packages/flask/app.py&#34;, line 1484, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;/usr/local/lib/python3.9/site-packages/flask/app.py&#34;, line 1469, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
  File &#34;/usr/local/lib/python3.9/site-packages/flask_login/utils.py&#34;, line 290, in decorated_view
    return current_app.ensure_sync(func)(*args, **kwargs)
  File &#34;/app/app.py&#34;, line 509, in export_qr_pdf
    doc.build(story)
  File &#34;/usr/local/lib/python3.9/site-packages/reportlab/platypus/doctemplate.py&#34;, line 1317, in build
    BaseDocTemplate.build(self,flowables, canvasmaker=canvasmaker)
  File &#34;/usr/local/lib/python3.9/site-packages/reportlab/platypus/doctemplate.py&#34;, line 1082, in build
    self.handle_flowable(flowables)
  File &#34;/usr/local/lib/python3.9/site-packages/reportlab/platypus/doctemplate.py&#34;, line 931, in handle_flowable
    if frame.add(f, canv, trySplit=self.allowSplitting):
  File &#34;/usr/local/lib/python3.9/site-packages/reportlab/platypus/frames.py&#34;, line 169, in _add
    w, h = flowable.wrap(aW, h)
  File &#34;/usr/local/lib/python3.9/site-packages/reportlab/platypus/tables.py&#34;, line 1317, in wrap
    self._calc(availWidth, availHeight)
  File &#34;/usr/local/lib/python3.9/site-packages/reportlab/platypus/tables.py&#34;, line 732, in _calc
    self._calc_height(availHeight,availWidth,W=W)
  File &#34;/usr/local/lib/python3.9/site-packages/reportlab/platypus/tables.py&#34;, line 656, in _calc_height
    dW,t = self._listCellGeom(v,w or self._listValueWidth(v),s)
  File &#34;/usr/local/lib/python3.9/site-packages/reportlab/platypus/tables.py&#34;, line 492, in _listCellGeom
    vw, vh = v.wrapOn(canv, aW, aH)
AttributeError: &#39;str&#39; object has no attribute &#39;wrapOn&#39;
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/usr/local/lib/python3.9/site-packages/flask/app.py", line 2213, in __call__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.9/site-packages/flask/app.py", line 2193, in wsgi_app
    response = self.handle_exception(e)
  File "/usr/local/lib/python3.9/site-packages/flask/app.py", line 2190, in wsgi_app
    response = self.full_dispatch_request()
  File "/usr/local/lib/python3.9/site-packages/flask/app.py", line 1486, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/usr/local/lib/python3.9/site-packages/flask/app.py", line 1484, in full_dispatch_request
    rv = self.dispatch_request()
  File "/usr/local/lib/python3.9/site-packages/flask/app.py", line 1469, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
  File "/usr/local/lib/python3.9/site-packages/flask_login/utils.py", line 290, in decorated_view
    return current_app.ensure_sync(func)(*args, **kwargs)
  File "/app/app.py", line 509, in export_qr_pdf
    doc.build(story)
  File "/usr/local/lib/python3.9/site-packages/reportlab/platypus/doctemplate.py", line 1317, in build
    BaseDocTemplate.build(self,flowables, canvasmaker=canvasmaker)
  File "/usr/local/lib/python3.9/site-packages/reportlab/platypus/doctemplate.py", line 1082, in build
    self.handle_flowable(flowables)
  File "/usr/local/lib/python3.9/site-packages/reportlab/platypus/doctemplate.py", line 931, in handle_flowable
    if frame.add(f, canv, trySplit=self.allowSplitting):
  File "/usr/local/lib/python3.9/site-packages/reportlab/platypus/frames.py", line 169, in _add
    w, h = flowable.wrap(aW, h)
  File "/usr/local/lib/python3.9/site-packages/reportlab/platypus/tables.py", line 1317, in wrap
    self._calc(availWidth, availHeight)
  File "/usr/local/lib/python3.9/site-packages/reportlab/platypus/tables.py", line 732, in _calc
    self._calc_height(availHeight,availWidth,W=W)
  File "/usr/local/lib/python3.9/site-packages/reportlab/platypus/tables.py", line 656, in _calc_height
    dW,t = self._listCellGeom(v,w or self._listValueWidth(v),s)
  File "/usr/local/lib/python3.9/site-packages/reportlab/platypus/tables.py", line 492, in _listCellGeom
    vw, vh = v.wrapOn(canv, aW, aH)
AttributeError: 'str' object has no attribute 'wrapOn'


-->
